#!/bin/bash
set -euo pipefail

# ===== Variables inyectadas por templatefile() =====
REPO_URL="${repo_url}"
APP_PORT="${app_port}"                 # ej: 8080
DB_NAME="${db_name}"                   # ej: fleteahora
DB_USER="${db_user}"                   # ej: appuser
DB_PASS="${db_pass}"                   # ej: supersecret
JWT_SECRET="${jwt_secret}"
CORS_ORIGIN="${cors_origin}"           # ej: "*"
ENABLE_PGADMIN="${enable_pgadmin}"
ENABLE_MAILHOG="${enable_mailhog}"

BASE_DIR="/opt/fleteahora"
APP_DIR="$BASE_DIR/app"
NGX_DIR="$BASE_DIR/nginx"

# ===== Docker CE + Compose (Amazon Linux 2023) =====
if ! command -v docker >/dev/null 2>&1; then
  dnf -y update || true
  dnf -y install dnf-plugins-core git jq || true
  # Intento directo; si no existe el paquete, agrego repo oficial de Docker
  dnf -y install docker docker-compose-plugin || {
    dnf config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo || true
    dnf -y install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
  }
  systemctl enable --now docker
fi

mkdir -p "$APP_DIR" "$NGX_DIR"

# ===== Clonar o actualizar repo =====
if [ ! -d "$APP_DIR/.git" ]; then
  git clone "$REPO_URL" "$APP_DIR"
else
  (cd "$APP_DIR" && git fetch --all && git reset --hard origin/main || true)
fi

# ===== .env de la app (DB local vía servicio 'db') =====
cat >"$APP_DIR/.env" <<EOF
DATABASE_URL=postgresql://$DB_USER:$DB_PASS@db:5432/$DB_NAME
PORT=$APP_PORT
NODE_ENV=production
JWT_SECRET=$JWT_SECRET
CORS_ORIGIN=$CORS_ORIGIN
SMTP_HOST=mailhog
SMTP_PORT=1025
THESIS_MODE=true
EOF
chmod 600 "$APP_DIR/.env"

# ===== Nginx reverse proxy (simple + /healthz) =====
# Usamos default.conf para evitar colisiones con configs por defecto del contenedor
cat >"$NGX_DIR/default.conf" <<'NGINX'
server {
  listen 80 default_server;
  server_name _;

  location = /healthz {
    add_header Content-Type text/plain;
    return 200 'ok';
  }

  client_max_body_size 10m;

  location / {
    proxy_pass         http://app:__APP_PORT__;
    proxy_http_version 1.1;
    proxy_set_header   Host $host;
    proxy_set_header   X-Real-IP $remote_addr;
    proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header   X-Forwarded-Proto $scheme;
    proxy_set_header   Upgrade $http_upgrade;
    proxy_set_header   Connection "upgrade";
  }
}
NGINX
sed -i "s/__APP_PORT__/$APP_PORT/g" "$NGX_DIR/default.conf"
chmod 644 "$NGX_DIR/default.conf"

# ===== docker-compose.yml =====
cat >"$BASE_DIR/docker-compose.yml" <<'YAML'
version: "3.9"
services:
  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: $${DB_NAME}
      POSTGRES_USER: $${DB_USER}
      POSTGRES_PASSWORD: $${DB_PASS}
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${DB_USER} -d $${DB_NAME} -h 127.0.0.1"]
      interval: 5s
      timeout: 3s
      retries: 20
    restart: unless-stopped

  mailhog:
    image: mailhog/mailhog
    ports:
      - "8025:8025"
    restart: unless-stopped

  app:
    image: node:20-alpine
    working_dir: /usr/src/app
    env_file:
      - ./app/.env
    environment:
      DB_NAME: $${DB_NAME}
      DB_USER: $${DB_USER}
      DB_PASS: $${DB_PASS}
    volumes:
      - ./app:/usr/src/app
      - node_modules:/usr/src/app/node_modules
    depends_on:
      db:
        condition: service_healthy
    command: >
      sh -lc "
      apk add --no-cache bash curl >/dev/null 2>&1 || true;
      if [ -f package-lock.json ]; then npm ci; else npm install; fi &&
      npx prisma generate &&
      npx prisma migrate deploy || true &&
      (npm run build && node dist/index.js || node src/index.js)
      "
    restart: unless-stopped

  nginx:
    image: nginx:1.27-alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx:/etc/nginx/conf.d:ro
    depends_on:
      - app
    restart: unless-stopped

  pgadmin:
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "5050:80"
    depends_on:
      - db
    restart: unless-stopped

volumes:
  pgdata:
  node_modules:
YAML

# ===== Variables para docker compose (DB_* usadas por db/app) =====
cat >"$BASE_DIR/.env" <<EOF
DB_NAME=$DB_NAME
DB_USER=$DB_USER
DB_PASS=$DB_PASS
EOF
chmod 600 "$BASE_DIR/.env"

# ===== Levantar el stack =====
cd "$BASE_DIR"

# Opcional: desactivar servicios según flags
if [ "$ENABLE_MAILHOG" != "true" ]; then
  sed -i '/^  mailhog:/,/^$/d' docker-compose.yml || true
fi
if [ "$ENABLE_PGADMIN" != "true" ]; then
  sed -i '/^  pgadmin:/,/^$/d' docker-compose.yml || true
fi

docker compose pull || true
docker compose up -d
docker compose ps || true

# ===== Fin =====
echo "Stack modo tesis desplegado (EC2+Compose)."

# ===== Bootstrap idempotente en cada boot (systemd) =====
cat >/usr/local/bin/fleteahora-bootstrap.sh <<'SH'
#!/usr/bin/env bash
set -euo pipefail
log(){ echo "[bootstrap] $*"; }

ensure_docker() {
  if command -v docker >/dev/null 2>&1 && docker compose version >/dev/null 2>&1; then
    log "Docker + Compose OK"; return
  fi
  log "Instalando Docker CE + Compose (con fallback)..."
  dnf -y update || true
  dnf -y install docker docker-compose-plugin || {
    dnf -y install dnf-plugins-core || true
    dnf config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo || true
    dnf -y install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
  }
  systemctl enable --now docker
  log "Docker version: $(docker --version || echo 'N/A')"
  log "Compose  version: $(docker compose version || echo 'N/A')"
}

bring_up_stack() {
  local BASE_DIR="/opt/fleteahora"
  [ -f "$BASE_DIR/docker-compose.yml" ] || { log "No existe $BASE_DIR/docker-compose.yml"; return 1; }
  log "Levantando stack..."
  (cd "$BASE_DIR" && docker compose up -d)
  (cd "$BASE_DIR" && docker compose ps || true)
}

ensure_docker
bring_up_stack || true
SH
chmod +x /usr/local/bin/fleteahora-bootstrap.sh

cat >/etc/systemd/system/fleteahora-bootstrap.service <<'UNIT'
[Unit]
Description=FleteAhora Bootstrap (instala Docker/Compose y levanta el stack)
Wants=network-online.target
After=network-online.target docker.service
Requires=docker.service

[Service]
Type=oneshot
ExecStart=/usr/local/bin/fleteahora-bootstrap.sh
RemainAfterExit=yes
StandardOutput=journal
StandardError=journal

[Install]
WantedBy=multi-user.target
UNIT

systemctl daemon-reload
systemctl enable --now fleteahora-bootstrap


