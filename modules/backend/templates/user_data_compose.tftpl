#!/bin/bash
set -euo pipefail

# ===== Expandir raíz si el volumen fue agrandado =====
sudo growpart /dev/xvda 1 || true
fs=$(findmnt -n -o FSTYPE / || echo xfs)
if [ "$fs" = "xfs" ]; then
  sudo xfs_growfs / || true
else
  sudo resize2fs /dev/xvda1 || true
fi

# ===== Variables inyectadas por templatefile() =====
REPO_URL="${repo_url}"
APP_PORT="${app_port}"
DB_NAME="${db_name}"
DB_USER="${db_user}"
DB_PASS="${db_pass}"
JWT_SECRET="${jwt_secret}"
CORS_ORIGIN="${cors_origin}"
ENABLE_PGADMIN="${enable_pgadmin}"
ENABLE_MAILHOG="${enable_mailhog}"

DB_MODE="${db_mode}"         # "compose" | "rds"
RDS_HOST="${db_host}"        # requerido si DB_MODE="rds"

BASE_DIR="/opt/fleteahora"
APP_DIR="$BASE_DIR/app"
NGX_DIR="$BASE_DIR/nginx"

# ===== Crear estructura y permisos =====
sudo mkdir -p "$APP_DIR" "$NGX_DIR"
sudo chown -R ec2-user:ec2-user "$BASE_DIR"

# ===== Docker CE + Compose (Amazon Linux 2023) =====
if ! command -v docker >/dev/null 2>&1; then
  sudo dnf -y install dnf-plugins-core git jq
  sudo dnf config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
  # AL2023 rompe $releasever; fijarlo a 9 para usar repos de CentOS/RHEL 9
  sudo sed -i 's/\$releasever/9/g' /etc/yum.repos.d/docker-ce.repo
  sudo dnf clean all
  sudo dnf -y install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin --nobest
  sudo systemctl enable --now docker
fi

# ===== Clonar o actualizar repo =====
if [ ! -d "$APP_DIR/.git" ]; then
  sudo -u ec2-user git clone "$REPO_URL" "$APP_DIR"
else
  sudo -u ec2-user bash -lc "cd '$APP_DIR' && git fetch --all && git reset --hard origin/main || true"
fi

# ===== Construir DATABASE_URL según DB_MODE =====
if [ "$DB_MODE" = "rds" ] && [ -n "${RDS_HOST:-}" ]; then
  DB_URL="postgresql://$DB_USER:$DB_PASS@$RDS_HOST:5432/$DB_NAME?sslmode=require"
else
  DB_URL="postgresql://$DB_USER:$DB_PASS@db:5432/$DB_NAME"
fi

# ===== .env de la app =====
cat >"$APP_DIR/.env" <<EOF
DATABASE_URL=$DB_URL
PORT=$APP_PORT
NODE_ENV=production
JWT_SECRET=$JWT_SECRET
CORS_ORIGIN=$CORS_ORIGIN
SMTP_HOST=mailhog
SMTP_PORT=1025
THESIS_MODE=true
DB_MODE=$DB_MODE
EOF
sudo chmod 600 "$APP_DIR/.env"
sudo chown ec2-user:ec2-user "$APP_DIR/.env"

# ===== Nginx reverse proxy (simple + /healthz) =====
cat >"$NGX_DIR/default.conf" <<'NGINX'
server {
  listen 80 default_server;
  server_name _;

  location = /healthz {
    add_header Content-Type text/plain;
    return 200 'ok';
  }

  client_max_body_size 10m;

  location / {
    proxy_pass         http://app:__APP_PORT__;
    proxy_http_version 1.1;
    proxy_set_header   Host $host;
    proxy_set_header   X-Real-IP $remote_addr;
    proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header   X-Forwarded-Proto $scheme;
    proxy_set_header   Upgrade $http_upgrade;
    proxy_set_header   Connection "upgrade";
  }
}
NGINX
sudo sed -i "s/__APP_PORT__/$APP_PORT/g" "$NGX_DIR/default.conf"
sudo chmod 644 "$NGX_DIR/default.conf"
sudo chown ec2-user:ec2-user "$NGX_DIR/default.conf"

# ===== docker-compose.yml (dual: compose vs rds) =====
if [ "$DB_MODE" = "rds" ]; then
  # ---- Sin servicio db; app NO depende de db
  cat >"$BASE_DIR/docker-compose.yml" <<'YAML'
services:
  mailhog:
    image: mailhog/mailhog
    ports:
      - "8025:8025"
    restart: unless-stopped

  app:
    image: node:20-alpine
    working_dir: /usr/src/app
    env_file:
      - ./app/.env
    environment:
      DB_NAME: $${DB_NAME}
      DB_USER: $${DB_USER}
      DB_PASS: $${DB_PASS}
    volumes:
      - ./app:/usr/src/app
      - node_modules:/usr/src/app/node_modules
    command: >
      sh -lc "
      apk add --no-cache bash curl >/dev/null 2>&1 || true;
      if [ -f package-lock.json ]; then npm ci; else npm install; fi &&
      npx prisma generate &&
      npx prisma migrate deploy || true &&
      (npm run build && node dist/index.js || node src/index.js)
      "
    restart: unless-stopped

  nginx:
    image: nginx:1.27-alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - app
    restart: unless-stopped

  pgadmin:
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "5050:80"
    restart: unless-stopped

volumes:
  node_modules:
YAML
else
  # ---- Con servicio db; app depende de db saludable
  cat >"$BASE_DIR/docker-compose.yml" <<'YAML'
services:
  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: $${DB_NAME}
      POSTGRES_USER: $${DB_USER}
      POSTGRES_PASSWORD: $${DB_PASS}
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${DB_USER} -d $${DB_NAME} -h 127.0.0.1"]
      interval: 5s
      timeout: 3s
      retries: 20
    restart: unless-stopped

  mailhog:
    image: mailhog/mailhog
    ports:
      - "8025:8025"
    restart: unless-stopped

  app:
    image: node:20-alpine
    working_dir: /usr/src/app
    env_file:
      - ./app/.env
    environment:
      DB_NAME: $${DB_NAME}
      DB_USER: $${DB_USER}
      DB_PASS: $${DB_PASS}
    volumes:
      - ./app:/usr/src/app
      - node_modules:/usr/src/app/node_modules
    depends_on:
      db:
        condition: service_healthy
    command: >
      sh -lc "
      apk add --no-cache bash curl >/dev/null 2>&1 || true;
      if [ -f package-lock.json ]; then npm ci; else npm install; fi &&
      npx prisma generate &&
      npx prisma migrate deploy || true &&
      (npm run build && node dist/index.js || node src/index.js)
      "
    restart: unless-stopped

  nginx:
    image: nginx:1.27-alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - app
    restart: unless-stopped

  pgadmin:
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "5050:80"
    depends_on:
      - db
    restart: unless-stopped

volumes:
  pgdata:
  node_modules:
YAML
fi

# ===== .env para Compose (exporta DB_* a servicios) =====
cat >"$BASE_DIR/.env" <<EOF
DB_NAME=$DB_NAME
DB_USER=$DB_USER
DB_PASS=$DB_PASS
EOF
sudo chmod 600 "$BASE_DIR/.env"
sudo chown ec2-user:ec2-user "$BASE_DIR/.env"

# ===== Desactivar servicios opcionales según flags =====
cd "$BASE_DIR"
if [ "$ENABLE_MAILHOG" != "true" ]; then
  sed -i '/^  mailhog:/,/^$/d' docker-compose.yml || true
fi
if [ "$ENABLE_PGADMIN" != "true" ]; then
  sed -i '/^  pgadmin:/,/^$/d' docker-compose.yml || true
fi

# ===== Levantar stack =====
sudo docker compose pull || true
sudo docker compose up -d --remove-orphans
sudo docker compose ps || true
sleep 3
curl -sS -i http://127.0.0.1/healthz || true

# ===== Bootstrap idempotente en cada boot (systemd) =====
cat >/usr/local/bin/fleteahora-bootstrap.sh <<'SH'
#!/usr/bin/env bash
set -euo pipefail
BASE_DIR="/opt/fleteahora"
if ! command -v docker >/dev/null 2>&1; then exit 0; fi
cd "$BASE_DIR" || exit 0
docker compose up -d --remove-orphans || true
exit 0
SH
sudo chmod +x /usr/local/bin/fleteahora-bootstrap.sh

cat >/etc/systemd/system/fleteahora-bootstrap.service <<'UNIT'
[Unit]
Description=FleteAhora Bootstrap (levanta Docker Compose en cada boot)
Wants=network-online.target
After=network-online.target docker.service
Requires=docker.service

[Service]
Type=oneshot
ExecStart=/usr/local/bin/fleteahora-bootstrap.sh
RemainAfterExit=yes
StandardOutput=journal
StandardError=journal

[Install]
WantedBy=multi-user.target
UNIT

sudo systemctl daemon-reload
sudo systemctl enable --now fleteahora-bootstrap
